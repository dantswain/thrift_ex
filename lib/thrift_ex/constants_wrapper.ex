defmodule ThriftEx.ConstantsWrapper do
  def generate(hrl, out_dir, namespace) do
    constants = Quaff.Constants.get_constants(hrl)
    outfile = filename(namespace, hrl, out_dir)
    header = gen_header(namespace, hrl)

    body = constants
    |> filter_constants
    |> Enum.map(&define_constant/1)
    |> Enum.join("\n")

    footer = "end"

    write_file(outfile, header, body, footer)
  end

  defp filename(nil, hrl, out_dir) do
    filename(hrl, out_dir)
  end
  defp filename(namespace, hrl, out_dir) do
    dir = Path.join(out_dir, Mix.Utils.underscore(namespace))
    filename(hrl, dir)
  end

  defp filename(hrl, out_dir) do
    base = Path.basename(hrl, ".hrl")
    Path.join(out_dir, base <> ".ex")
  end

  defp gen_header(namespace, hrl) do
    [
        "defmodule #{modulename(namespace, hrl)} do",
        "  # GENERATED by ThriftEx from #{hrl}",
        ""
    ] |> Enum.join("\n")
  end

  defp modulename(nil, hrl) do
    Mix.Utils.camelize(
      Path.basename(hrl, ".hrl")
    )
  end

  defp modulename(namespace, hrl) do
    Mix.Utils.command_to_module_name(namespace) <> "." <> modulename(nil, hrl)
  end

  defp filter_constants(constants) do
    Enum.filter(constants, &wrappable_constant?/1)
  end

  defp wrappable_constant?({name, _defn}) do
    case Atom.to_string(name) do
      "MODULE_STRING" -> false
      "FILE" -> false
      "MODULE" -> false
      "_" <> _rest -> false
      _ -> true
    end
  end

  defp define_constant({name, defn}) do
    [
        "  def #{fun_name name} do",
        "    #{inspect defn}",
        "  end",
        "  "
    ] |> Enum.join("\n")
  end

  defp fun_name(name) do
    name
    |> Atom.to_string
    |> String.downcase
  end

  defp write_file(path, header, body, footer) do
    path |> Path.dirname |> File.mkdir_p
    File.write(path,
               [header, body, footer] |> Enum.join("\n"))
  end
end
